{
  "name": "beeline",
  "version": "0.1.18",
  "description": "A laughably simplistic router for node.js",
  "keywords": [
    "url",
    "dispatch",
    "router",
    "request handler",
    "middleware"
  ],
  "maintainers": [
    {
      "name": "Xavi",
      "email": "xavi.rmz@gmail.com",
      "url": "http://xavi.co"
    }
  ],
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/xavi-/beeline.git"
  },
  "engines": {
    "node": ">= 0.3.1"
  },
  "dependencies": {
    "lru-cache": "~2.3.0"
  },
  "readme": "# Beeline\n\nA laughably simplistic router for node.js\n\nCurrently works with node.js v0.3.1 and above\n\n## Goals\n* Simple\n* Unobtrusive\n* Fairly Foolproof\n* Easy to debug\n* Fast\n\n## Examples\n\n```javascript\nvar bee = require(\"beeline\");\nvar router = bee.route({ // Create a new router\n    \"/cheggit\": function(req, res) {\n        // Called when req.url === \"/cheggit\" or req.url === \"/cheggit?woo=poo\"\n    },\n    \"/names/`last-name`/`first-name`\": function(req, res, tokens, values) {\n        // Called when req.url contains three parts, the first of is \"name\".\n        // The parameter tokens is an object that maps token names to values.\n        // For example if req.url === \"/names/smith/will\"\n        //   then tokens ===  { \"first-name\": \"will\", \"last-name\": \"smith\" }\n        //   and values === [ \"will\", \"smith\" ]\n    },\n    \"/static/`path...`\": function(req, res, tokens, values) {\n        // Called when req.url starts with \"/static/\"\n        // The parameter tokens is an object that maps token name to a value\n        // The parameter values is a list of\n        // For example if req.url === \"/static/pictures/actors/smith/will.jpg\"\n        //   then tokens === { \"path\": \"pictures/actors/smith/will.jpg\" }\n        //   and values === [ \"pictures/actors/smith/will.jpg\" ]\n    },\n    \"/`user`/static/`path...`\": function(req, res, tokens, values) {\n        // Called when req.url contains at least three parts, the second of which\n        // is \"static\".\n        // The parameter tokens is an object that maps token names and value\n        // For example if req.url === \"/da-oozer/static/pictures/venkman.jpg\"\n        //   then tokens === { \"user\": \"da-oozer\", \"path\": \"pictures/venkman.jpg\" }\n        //   and values === [ \"da-oozer\", pictures/venkman.jpg\" ]\n    },\n    \"r`^/actors/([\\\\w]+)/([\\\\w]+)$`\": function(req, res, matches) {\n        // Called when req.url matches this regex: \"^/actors/([\\\\w]+)/([\\\\w]+)$\"\n        // An array of captured groups is passed as the third parameter\n        // For example if req.url === \"/actors/smith/will\"\n        //   then matches === [ \"smith\", \"will\" ]\n    },\n    \"`404`\": function(req, res) {\n        // Called when no other route rule are matched\n        //\n        // This handler can later be called explicitly with router.missing\n    },\n    \"`500`\": function(req, res, err) {\n        // Called when an exception is thrown by another router function\n        // The error that caused the exception is passed as the third parameter\n        // This _not_ guaranteed to catch all exceptions\n        //\n        // This handler can later be called explicitly with router.error\n    }\n});\n\nrouter.add({ // Use `.add` to append new rules to a router \n    \"/ /home r`^/index(.php|.html|.xhtml)?$`\": function(req, res) {\n        // Called when req.url === \"/\" or req.url === \"/home\"\n        //    or req.url matches this regex: ^/index(.php|.html|.xhtml)?$\n        //      (i.e. req.url === \"/index.php\" or req.url === \"/index.html\")\n        // Note that any number of rules can be combined using a space.\n        // All rules will call the same request handler when matched.\n    },\n    \"/my-method\": { // Method (aka verb) specific dispatch.  Note case matters.\n        \"GET\": function(req, res) {\n            // Called when req.url === \"/my-method\" and req.method === \"GET\"\n        },\n        \"POST PUT\": function(req, res) {\n            // Called when req.url === \"/my-method\" and\n            //  req.method === \"POST\" or req.method === \"PUT\"\n            // Methods can be combined with a space like URL rules.\n        },\n        \"any\": function(req, res) {\n            // Called when req.url === \"/my-method\" and req.method is not\n            // \"GET\" or \"POST\"\n        }\n    },\n    \"`405`\": function(req, res) {\n        // Called when when a URL is specified but no corresponding method (aka verb)\n        // matches.  For example, this handler would be executed if the \"any\" catch\n        // all wasn't specified in the handler above and req.method === \"HEAD\"\n        //\n        // This handler can later be called explicitly with router.missingVerb\n    },\n    \"/explicit-calls\": function(req, res) { // If necessary you can reroute requests\n        if(url.parse(req.url).query[\"item-name\"] === \"unknown\") {\n            // Calls the 404 (aka missing) handler:\n            return router.missing(req, res, this);\n            // The last parameter is optional.  It sets the this pointer in the\n            // 404 handler.\n        }\n        \n        if(url.parse(req.url).query[\"item-name\"] === \"an-error\") {\n            // Calls the 500 (aka error) handler:\n            return router.error(req, res, err, this);\n            // The last parameter is optional.  It sets the this pointer in the\n            // 500 handler.\n        }\n        \n        // Do normal request handling\n    }\n});\n\n// Starts serve with routes defined above:\nrequire(\"http\").createServer(router).listen(8001);\n```\n\nSee `test/test.js` for a working example.\n\n## The API\n\nTo start, simply store the `beeline` library in a local variable:\n```javascript\nvar bee = require(\"beeline\");\n```\nThe `beeline` library contains the following three methods:\n\n- `bee.route(routes)`: Used to create a new router.  It returns a function called `rtn_fn` that takes [ServerRequest](http://nodejs.org/docs/v0.6.10/api/http.html#http.ServerRequest) and [ServerResponse](http://nodejs.org/docs/v0.6.10/api/http.html#http.ServerResponse) objects as parameters.  The `routes` parameter is an objects that maps rules to handlers.  See examples section for more details.\n- `bee.staticFile(path, mimeType[, maxage=31536000])`: This is a utility method that is used to quickly expose static files.  It returns a function called `rtn_fn` that takes [ServerRequest](http://nodejs.org/docs/v0.6.10/api/http.html#http.ServerRequest) and [ServerResponse](http://nodejs.org/docs/v0.6.10/api/http.html#http.ServerResponse) objects as parameters.  When `rtn_fn` is called, the file contents located at `path` are served (via the ServerResponse) with the `Content-Type` set to the `mimeType` parameter.  If the file at `path` does not exist a `404` is served.  The optional `maxage` parameter is used to in the response's `Cache-Control` header.  Also note that all `Set-Cookie` headers are removed.  Here's an example of how you might use `bee.staticFile`:\n\n    ```javascript\n    bee.route({\n        \"/robots.txt\": bee.staticFile(\"./content/robots.txt\", \"text/plain\")\n    });\n    ```\n- `bee.staticDir(path, mimeTypes[, maxage=31536000])`: This is utility method is used to expose directories of files.  It returns a function called `rtn_fn` that takes a [ServerRequest](http://nodejs.org/docs/v0.6.10/api/http.html#http.ServerRequest) object, a [ServerResponse](http://nodejs.org/docs/v0.6.10/api/http.html#http.ServerResponse) object, an optional third parameter, and an array of strings called `matches` as parameters.  Whenever `rtn_fn` is called, the items of `matches` are joined together and then concatenated to `path`.  The resulting string is assumed to be a path to a specific file.  If this file exists, its contents are served (via the ServerResponse) with the `Content-Type` set to the value that corresponds to the file's extension in the `mimeTypes` object.  If the resulting string doesn't point to an existing file or if the file's extension is not found in `mimeTypes`, then a `404` is served.  Also, file extensions require a leading period (`.`) and are assumed to be lowercase.  The optional `maxage` parameter is used to in the response's `Cache-Control` header.  Also note that all `Set-Cookie` headers are removed.   Here's an example of how you might use `bee.staticDir`:\n\n    ```javascript\n    bee.route({\n        // /pics/mofo.png serves ./content/pics/mofo.png\n        // /pics/la-ghetto/oh-gee.gif serves ./content/pics/la-ghetto/oh-gee.gif\n        // /pics/woo-fee.tiff serves a 404 since there's no corresponding mimeType specified.\n        // This helps prevent accidental exposure.\n        \"r`^/pics/(.*)$`\":\n            bee.staticDir(\"./content/pics/\", { \".gif\": \"image/gif\", \".png\": \"image/png\",\n                                               \".jpg\": \"image/jpeg\", \".jpeg\": \"image/jpeg\" }),\n        // Also works with URLs with tokens\n        // /static/help/faq.html serves ./static/help/faq.html\n        // /static/properties.json serves a 404 since there's no corresponding mimeType specified.\n        \"/static/`path...`\":\n            bee.staticDir(\"./static/\", { \".txt\": \"text/plain\", \".html\": \"text/html\",\n                                         \".css\": \"text/css\", \".xml\": \"text/xml\" }),\n        // More complicated path constructs also works\n        // /will-smith/img-library/headshots/sexy42.jpg\n        //    serves ./user-images/will-smith/headshots/sexy42.jpg\n        \"/`user`/img-library/`path...`\":\n            bee.staticDir(\"./user-images/\", { \".jpg\": \"image/jpeg\", \".jpeg\": \"image/jpeg\" })\n    });\n    ```\n\nBeeline is also at least somewhat compatibile with [expressjs](https://github.com/visionmedia/express).  Here's an example:\n\n```javascript\napp.use(beeline.route({\n    \"/\": function(req, res, next) {\n        fs.readFile(\"./templates/index.html\", function(err, data) {\n            if(err) { throw err; }\n\n            res.html(data);\n        });\n    },\n    \"/`user`/static/`path...`\": function(req, res, tokens, values, next) {\n        /* ... code ... */\n    }\n}));\n```\n\nNote the `next` callback is always passed as the last parameter.\n\n### Precedence Rules\n\nIn the event that a request matches two rules, the following precedence rules are considered:\n\n- Fully defined rules take highest precedence.  In other words, `\"/index\"` has a higher precedences then ``\"r`^/index$`\"`` even though semantically both rules are exactly the same.\n- Tokens and RegExp rules have the same precedence\n- RegExp rules take higher precedence than `404`\n- `404` and `405` have the lowest precedences\n- The `500` rules is outside the precedence rules.  It can potentially be triggered at any time.\n\nIf the exact same rule is defined twice, then it's unspecified which request handler will be triggered.\n\n## Getting Beeline\n\nThe easiest way to get beeline is with [npm](http://npmjs.org/):\n\n    npm install beeline\n\nAlternatively you can clone this git repository:\n\n    git clone git://github.com/xavi-/beeline.git\n\n## Running Unit Tests\n\nExecute the following commands to run the beeline's unit tests:\n\n    $ cd <beeline-directory>\n    $ cd test\n    $ node test.js\n\nThe last line printed to the console should be, \"All done.  Everything passed.\", if all the tests passed successfully.\n\n## Developed by\n* Xavi Ramirez\n\n## License\nThis project is released under [The MIT License](http://www.opensource.org/licenses/mit-license.php).\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/xavi-/beeline/issues"
  },
  "homepage": "https://github.com/xavi-/beeline",
  "_id": "beeline@0.1.18",
  "dist": {
    "shasum": "c0f794422fe3e6d0c5806242f140a57d511345d6"
  },
  "_from": "beeline@0.1.18",
  "_resolved": "https://registry.npmjs.org/beeline/-/beeline-0.1.18.tgz"
}
